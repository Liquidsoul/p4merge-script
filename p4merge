#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# install using brew or copy to /usr/local/bin/p4merge
# then
# git config --global merge.tool p4merge
# git config --global mergetool.keepTemporaries false
# git config --global mergetool.prompt false

alias errcho='>&2 echo'

if [ -n "${GIT_DIR:-}" ]; then
  if git submodule | grep -q "$2"; then
    tmp=$(mktemp -t "$2") && trap 'rm -rf "$tmp"' EXIT HUP INT QUIT TERM
    sha=$(cd "$2" > /dev/null && git rev-parse HEAD)
    echo "Subproject commit $sha" > "$tmp"
    set -- "$1" "$tmp"
  fi
fi

for arg; do [[ $arg = /* ]] || arg=$PWD/$arg; absargs+=("$arg"); done;

main() {
  local p4merge
  resolve_p4merge p4merge
  set +u
  $p4merge "${absargs[@]}"
  set -u
}

resolve_p4merge() {
  local __outputvar=$1
  readonly macos_p4merge=/Applications/p4merge.app/Contents/Resources/launchp4merge
  readonly linux_p4merge=/opt/p4v/bin/p4merge
  resolved_p4merge=
  if [ -e "$macos_p4merge" ]; then
      resolved_p4merge=$macos_p4merge
  elif [ -e "$linux_p4merge" ]; then
      resolved_p4merge=$linux_p4merge
  fi
  if [ "$resolved_p4merge" == "" ]; then
      errcho "No p4merge installation found"
      exit 1
  fi

  eval "$__outputvar=$resolved_p4merge"
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  main
fi
